[ [ fail ] [ not ] if ] :assert define

[ map eval unwrap ] :fold define

[ print "\n" print ] :println define

[
	# on stack: <initial values> list number
	[
		# on stack: <initial values> list number
		2 list clone
		# on stack: <initial values> [ list number ] [ list number ]
		[
			# on stack: <initial values> [ list number ]
			unwrap
			# on stack: <initial values> list number
			[
				# on stack: <initial values> list
				clone
				# on stack: <initial values> list list
				[
					# on stack: <inivial values> list
					eval unwrap
					# on stack: <results of function>
				]
					dig
				# on stack: <results of function> list
			]
				dig

			# on stack: <results of function> list number
			1 - times
		]
			dig

		unwrap
	]
	[ clone 0 > ]
		if

	# At this point, we've recursively called ourselves, or done nothing. Either
	# way, just drop the arguments and we're done.
	drop drop
]
	:times
	define

[
	[
		# on stack: symbol
		clone        # => symbol symbol
		to_list      # => symbol [ word ]
		swap wrap    # => [ word ] [ symbol ]
		swap prepend # => [ [ word ] symbol ]
	]
		map
		unwrap
]
:export
	define

[ :assert :fold :println :times :export ]
	export
